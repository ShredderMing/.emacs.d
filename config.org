#+TITLE: Emacs 配置文件
#+AUTHOR: shredderming
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{ctex}
#+PROPERTY: header-args :tangle yes

* 前言
* 配置
** 包管理器（use-package）
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (require 'package)
       (setq package-enable-at-startup nil)
       (require 'package-x)
       (defvar local-archive
	 (expand-file-name "local/" user-emacs-directory)
	 "Location of the package archive.")
       (setq package-archive-upload-base local-archive)
       (add-to-list 'package-archives
		    '("melpa" . "https://melpa.org/packages/"))
       (add-to-list 'package-archives
		    `("local" . ,local-archive) t)
       (package-initialize)
  
       (unless (package-installed-p 'use-package)
	 (package-refresh-contents)
	 (package-install 'use-package))
       (require 'use-package)) 
   #+END_SRC
** Auto tangle
   保存时，自动导出配置代码并编译，由于编译速度慢，用async包优化
   #+BEGIN_SRC emacs-lisp
     (use-package async
       :ensure t
       :commands (async-start))
   #+END_SRC
   保存时自动编译
   #+BEGIN_SRC emacs-lisp
     (defun tangle-init ()
       (when (equal (buffer-file-name)
		    (expand-file-name (concat user-emacs-directory "config.org")))
	 (message "Tangling...")
	 (async-start
	  (lambda ()
	    (let ((prog-mode-hook nil)
		  (src (expand-file-name "config.org" user-emacs-directory))
		  (dest (expand-file-name "config.el" user-emacs-directory)))
	      (require 'ob-tangle)
	      (org-babel-tangle-file src dest)
	      (if (byte-compile-file dest)
		  (byte-compile-dest-file dest)
		(with-current-buffer byte-compile-log-buffer
		  (buffer-string)))))
	  (lambda (result)
	    (message "Tangling completed: %s" result)))))
     (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC
** frame尺寸
   #+BEGIN_SRC emacs-lisp
     (setq initial-frame-alist '((width . 102) (height . 54)))
     (setq default-frame-alist '((width . 100) (height . 52)))
   #+END_SRC
** 编码
   #+BEGIN_SRC emacs-lisp
     (prefer-coding-system 'utf-8)
     (setq-default buffer-file-coding-system 'utf-8-auto-unix)
   #+END_SRC
** 基础设置
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t
	   inhibit-startup-screen t
	   cursor-in-non-selected-windows t
	   echo-keystrokes 0.1
	   initial-scratch-message nil
	   sentence-end-double-space nil)
     (fset 'yes-or-no-p 'y-or-n-p)
     (setq-default truncate-lines t)
     (dolist (mode '(tool-bar-mode
		     menu-bar-mode
		     fringe-mode
		     scroll-bar-mode
		     blink-cursor-mode
		     tooltip-mode))
       (funcall mode 0))
     (dolist (mode '(column-number-mode))
       (funcall mode 1))
   #+END_SRC
** 词典
   #+BEGIN_SRC emacs-lisp
     (use-package youdao-dictionary
       :ensure t
       :bind (("C-c y" . youdao-dictionary-search-at-point))
       :config
       (setq url-automatic-caching t))
   #+END_SRC
* 主题（Theme）
* Org相关
* 开发相关
* 参考的配置（不完全）
